# -*- coding: utf-8 -*-
"""Neural Networks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19AC2ERxddjDzP2BAB3S9jTf9MM3YnJgO
"""

import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC

from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.feature_extraction import DictVectorizer

from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV, ParameterGrid

import numpy as np

import warnings
warnings.filterwarnings("ignore")

!wget http://people.ischool.berkeley.edu/~zp/course_datasets/lab_4_training.csv
!wget http://people.ischool.berkeley.edu/~zp/course_datasets/lab_4_test.csv

df_train = pd.read_csv('./lab_4_training.csv')
df_test = pd.read_csv('./lab_4_test.csv')
df_train.head()

df_train.info()

print(df_test["year"].unique())
print(df_train["year"].unique())

# change first" to first
df_train['year']=df_train['year'].str.replace('"','')
df_test['year']=df_test['year'].str.replace('"','')

#find the majority class
df_train['gender'].value_counts()

# check accuracy if you choose the majority class in the training set
accuracy_train=len(df_train[df_train['gender']=='female'])/len(df_train)
print(accuracy_train)

# check accuracy if you choose the majority class in the test set
accuracy_test=len(df_test[df_test['gender']=='female'])/len(df_test)
print(accuracy_test)

"""Train a neural network with a single 10 node hidden layer. This time, use only 'height' as predictor"""

df_train['gender_dummy']=1
df_train.loc[df_train['gender']=='female', 'gender_dummy']=0
df_test['gender_dummy']=1
df_test.loc[df_test['gender']=='female', 'gender_dummy']=0

x_train=df_train['height']
x_test=df_test['height']
y_train=df_train['gender_dummy']
y_test=df_test['gender_dummy']

from keras.models import Sequential
from keras.layers import Dense
from sklearn import preprocessing

model = Sequential()
model.add(Dense(10, input_dim=1, activation='sigmoid'))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train)
print(accuracy_score(y_train,y_pred_train))

#Check accuracy on test data set
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test)
print(accuracy_score(y_test,y_pred_test))

"""Normalize the data and do the smae"""

min_max_scaler = preprocessing.MinMaxScaler()
x_train_minmax=x_train.values.reshape(-1, 1) 
x_train_minmax = min_max_scaler.fit_transform(x_train_minmax)
x_test_minmax=x_test.values.reshape(-1, 1) 
x_test_minmax = min_max_scaler.fit_transform(x_test_minmax)

model = Sequential()
model.add(Dense(10, input_dim=1, activation='sigmoid'))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_minmax, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_minmax)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_minmax)
print(accuracy_score(y_test,y_pred_test))

"""Transform year, eyecolor, exercise into a set of binary features. Using only these binary variable transformed features, train and predict the class of the test set."""

year_dummy_train = pd.get_dummies(df_train['year'],prefix='year').reset_index(drop=True)
eyecolor_dummy_train = pd.get_dummies(df_train['eyecolor'],prefix='eye').reset_index(drop=True)
exercise_dummy_train = pd.get_dummies(df_train['exercise'],prefix='exercise').reset_index(drop=True)
year_dummy_test = pd.get_dummies(df_test['year'],prefix='year').reset_index(drop=True)
eyecolor_dummy_test = pd.get_dummies(df_test['eyecolor'],prefix='eye').reset_index(drop=True)
exercise_dummy_test = pd.get_dummies(df_test['exercise'],prefix='exercise').reset_index(drop=True)

x_train_1=pd.concat([year_dummy_train,eyecolor_dummy_train,exercise_dummy_train],axis=1)
x_test_1=pd.concat([year_dummy_test,eyecolor_dummy_test,exercise_dummy_test],axis=1)
x_train_1=x_train_1.to_numpy()
x_test_1=x_test_1.to_numpy()

x_test_1.shape

model = Sequential()
model.add(Dense(10, activation='sigmoid', input_shape=(12,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_1, y_train, epochs=50)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_1)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_1)
print(accuracy_score(y_test,y_pred_test))

"""Using a NN, check the accuracy on  the test set of a model that trained only on the height and the eye color features of instances in the training set."""

eyecolor_dummy_train = pd.get_dummies(df_train['eyecolor'],prefix='eye').reset_index(drop=True)
eyecolor_dummy_test = pd.get_dummies(df_test['eyecolor'],prefix='eye').reset_index(drop=True)

x_train=pd.DataFrame(x_train)
x_train.column=['height']
x_test=pd.DataFrame(x_test)
x_test.column=['height']
x_train_2=pd.concat([x_train,eyecolor_dummy_train],axis=1)
x_test_2=pd.concat([x_test,eyecolor_dummy_test],axis=1)
x_train_2=x_train_2.to_numpy()
x_test_2=x_test_2.to_numpy()

model = Sequential()
model.add(Dense(10, activation='sigmoid',input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_2, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_2)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_2)
print(accuracy_score(y_test,y_pred_test))

"""Check the accuracy on the test set using the log of height values and eye color as a one-hot?"""

x_train=pd.DataFrame(x_train)
x_train.column=['height']
x_train=np.log(x_train)
x_test=pd.DataFrame(x_test)
x_test.column=['height']
x_test=np.log(x_test)
x_train_3=pd.concat([x_train,eyecolor_dummy_train],axis=1)
x_test_3=pd.concat([x_test,eyecolor_dummy_test],axis=1)
x_train_3=x_train_3.to_numpy()
x_test_3=x_test_3.to_numpy()

model = Sequential()
model.add(Dense(10,activation='sigmoid',input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_3, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_3)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_3)
print(accuracy_score(y_test,y_pred_test))

"""Check the accuracy on the test set using the Z-score of height values and eye color as a one-hot"""

from sklearn.preprocessing import scale
x_train_scaled=scale(x_train)
x_train_scaled=pd.DataFrame(x_train_scaled)
x_train_scaled.columns=['height']
x_test_scaled=scale(x_test)
x_test_scaled=pd.DataFrame(x_test_scaled)
x_test_scaled.columns=['height']

x_train_4=pd.concat([x_train_scaled,eyecolor_dummy_train],axis=1)
x_test_4=pd.concat([x_test_scaled,eyecolor_dummy_test],axis=1)
x_train_4=x_train_4.to_numpy()
x_test_4=x_test_4.to_numpy()

model = Sequential()
model.add(Dense(10, input_dim=1, activation='sigmoid', input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_4, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_4)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_4)
print(accuracy_score(y_test,y_pred_test))

"""Repeat the same for exercise hours + eye color"""

eyecolor_dummy_train = pd.get_dummies(df_train['eyecolor'],prefix='eye').reset_index(drop=True)
eyecolor_dummy_test = pd.get_dummies(df_test['eyecolor'],prefix='eye').reset_index(drop=True)

x_train_5=pd.concat([df_train['exercisehours'],eyecolor_dummy_train],axis=1)
x_test_5=pd.concat([df_test['exercisehours'],eyecolor_dummy_test],axis=1)
x_train_5=x_train_5.to_numpy()
x_test_5=x_test_5.to_numpy()

model = Sequential()
model.add(Dense(10, activation='sigmoid', input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

model.fit(x_train_5, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_5)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_5)
print(accuracy_score(y_test,y_pred_test))

#Check the accuracy on the test set using the log of exercisehours values and eye color as a one-hot
x_train_6=df_train['exercisehours']
x_train_6=x_train_6.replace(0,0.001)
x_train_6=np.log(df_train['exercisehours'])
x_test_6=df_test['exercisehours']
x_test_6=x_test_6.replace(0,0.001)
x_test_6=np.log(df_test['exercisehours'])
x_train_6=pd.concat([x_train_6,eyecolor_dummy_train],axis=1)
x_test_6=pd.concat([x_test_6,eyecolor_dummy_test],axis=1)
x_train_6=x_train_6.to_numpy()
x_test_6=x_test_6.to_numpy()

x_train_6.shape

model = Sequential()
model.add(Dense(10, activation='sigmoid', input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_6, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_6)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_6)
print(accuracy_score(y_test,y_pred_test))

#Check the accuracy on the test set using the Z-score of height values and eye color as a one-hot?
x_train_scaled_exh=scale(df_train['exercisehours'])
x_train_scaled_exh=pd.DataFrame(x_train_scaled_exh)
x_train_scaled_exh.columns=['exhour']
x_test_scaled_exh=scale(df_test['exercisehours'])
x_test_scaled_exh=pd.DataFrame(x_test_scaled_exh)
x_test_scaled_exh.columns=['exhour']

x_train_7=pd.concat([x_train_scaled_exh,eyecolor_dummy_train],axis=1)
x_test_7=pd.concat([x_test_scaled_exh,eyecolor_dummy_test],axis=1)
x_train_7=x_train_7.to_numpy()
x_test_7=x_test_7.to_numpy()

model = Sequential()
model.add(Dense(10, activation='sigmoid', input_shape=(6,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_7, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_7)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_7)
print(accuracy_score(y_test,y_pred_test))

x_train_8=pd.concat([x_train_scaled,x_train_scaled_exh,year_dummy_train,eyecolor_dummy_train,exercise_dummy_train],axis=1)
x_test_8=pd.concat([x_test_scaled,x_test_scaled_exh,year_dummy_test,eyecolor_dummy_test,exercise_dummy_test],axis=1)

model = Sequential()
model.add(Dense(10, activation='sigmoid', input_shape=(14,)))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])

model.summary()

model.fit(x_train_8, y_train, epochs=100)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_8)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_8)
print(accuracy_score(y_test,y_pred_test))

"""Try to improve  test set prediction accuracy

"""

from keras.wrappers.scikit_learn import KerasClassifier
from keras.layers import Dropout
from sklearn.model_selection import KFold
from keras.optimizers import Adam, SGD

#define the model to test
def build_model(activation,nodes,learning_rate,dropout_rate):
    model = Sequential()
    model.add(Dense(nodes,activation=activation, input_shape=[14,]))
    model.add(Dropout(dropout_rate))
    model.add(Dense(nodes,activation=activation, input_shape=[14,]))
    model.add(Dropout(dropout_rate))
    model.add(Dense(1,activation='sigmoid'))

    sgd = SGD(lr = learning_rate, momentum=0.8)
    model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])
    return model

learning_rate = [0.01,0.1]
dropout_rate = [0.1,0.2]
nodes=[5,15,25]
activation = ["relu", "sigmoid"]
nb_epoch = [10,50,100]
batch_size = [10,25,50]

param_grid = dict(nodes=nodes,activation=activation, nb_epoch=nb_epoch, batch_size=batch_size,learning_rate = learning_rate,dropout_rate = dropout_rate)

model = KerasClassifier(build_fn = build_model, verbose=0)

grid = GridSearchCV(estimator=model, param_grid=param_grid,cv = KFold())
grid_result = grid.fit(x_train_8, y_train)

print (grid_result.best_params_)

model = Sequential()
model.add(Dense(25,activation="relu", input_shape=[14,]))
model.add(Dropout(0.2))
model.add(Dense(25,activation="sigmoid", input_shape=[14,]))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))
sgd = SGD(lr = 0.1,momentum=0.9)
model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])

model.summary()

model.fit(x_train_8, y_train, epochs=10,batch_size=50)

print('Accuracy on training---')
y_pred_train=model.predict_classes(x_train_8)
print(accuracy_score(y_train,y_pred_train))
print('Accuracy on test---')
y_pred_test=model.predict_classes(x_test_8)
print(accuracy_score(y_test,y_pred_test))

"""For this dataset, xgboost gives me 0.9146 accuracy score."""

import xgboost as xgb
dtrain = xgb.DMatrix(x_train_8, label=y_train)
dtest = xgb.DMatrix(x_test_8, label=y_test)
param = {'max_depth': 5, 'eta': 1, 'objective':'binary:logistic', 'num_class': 1,'eval_metric': 'mlogloss'}
bst = xgb.train(param, dtrain, num_boost_round=500)

dtest = xgb.DMatrix(x_test_8)
y_pred_proba = bst.predict(dtest)
y_pred = np.where(y_pred_proba > 0.5, 1, 0)
acc = accuracy_score(y_test, y_pred)
print('score:{0:.4f}'.format(acc))